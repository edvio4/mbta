{"version":3,"sources":["components/Departure.js","services/departures.js","components/Departures.js","App.js","serviceWorker.js","index.js"],"names":["Departure","departure","carrier","moment","departureTime","tz","format","destination","trainNumber","trackNumber","status","getAll","station","a","params","axios","get","response","data","Departures","useState","departures","setDepartures","setStation","refresh","setRefresh","isLoading","setIsLoading","useEffect","departureService","sort","b","Date","parse","className","onClick","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6SAgBeA,EAbC,YAAmC,IAAdC,EAAa,EAAbA,UACjC,OACI,4BACI,4BAAMA,EAAUC,SAChB,4BAAMC,IAAOF,EAAUG,eAAeC,GAAG,oBAAoBC,OAAO,WACpE,4BAAML,EAAUM,aAChB,4BAAMN,EAAUO,aAChB,4BAAMP,EAAUQ,aAAe,OAC/B,4BAAMR,EAAUS,U,iBCKb,GAAEC,OAZP,uCAAG,WAAsBC,GAAtB,iBAAAC,EAAA,6DACLC,EAAS,GAETF,IACAE,EAAOF,QAAUA,GAJZ,SAMYG,IAAMC,IARf,kBAQ6B,CACrCF,OAAQA,IAPH,cAMLG,EANK,yBASFA,EAASC,MATP,2CAAH,uDC+DKC,EA3DE,WAAwB,IAAD,EACAC,mBAAS,IADT,mBAC7BC,EAD6B,KACjBC,EADiB,OAENF,mBALb,eAGmB,mBAE7BR,EAF6B,KAEpBW,EAFoB,OAGNH,oBAAS,GAHH,mBAG7BI,EAH6B,KAGpBC,EAHoB,OAIFL,oBAAS,GAJP,mBAI7BM,EAJ6B,KAIlBC,EAJkB,KAkBpC,OAFAC,qBAVW,YACP,uCAAC,4BAAAf,EAAA,6DACGc,GAAa,GADhB,SAE0BE,EAAiBlB,OAAOC,GAFlD,OAESK,EAFT,OAGGU,GAAa,GACbV,EAASa,MAAK,SAACjB,EAAEkB,GAAH,OAASC,KAAKC,MAAMpB,EAAET,eAAiB4B,KAAKC,MAAMF,EAAE3B,kBAClEkB,EAAcL,GALjB,2CAAD,yDASY,CAACL,EAASY,IAGtB,yBAAKU,UAAU,cACX,4BAtBS,gBAsBJtB,EAA2B,gBAAkB,gBAAlD,eACA,4BAAMT,MAASE,GAAG,oBAAoBC,OAAO,2BAC7C,6BACI,4BAAQ4B,UAAU,wBAAwBC,QAAS,kBAAMZ,EAzBpD,gBAyB+DX,EA1B/D,cACA,iBAyBL,aAzBK,gBA0BUA,EAA2B,gBAAkB,iBAE5D,4BAAQuB,QAAS,kBAAMV,GAAYD,KAAnC,YAIJ,6BAXJ,qBAaME,GACE,+BACI,+BACA,4BACI,uCACA,oCACA,2CACA,sCACA,sCACA,uCAEHL,EAAWe,KAAI,SAAAnC,GAAS,OACrB,kBAAC,EAAD,CACIoC,IAAKpC,EAAUO,YACfP,UAAWA,SAM1ByB,GACG,6CCjDDY,MARf,WACE,OACE,oCACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d9018d7f.chunk.js","sourcesContent":["import React from 'react';\nimport moment from 'moment-timezone';\n\nlet Departure = function Departure({ departure }) {\n    return (\n        <tr>\n            <td>{ departure.carrier }</td>\n            <td>{ moment(departure.departureTime).tz('America/New_York').format('h:mm A') }</td>\n            <td>{ departure.destination }</td>\n            <td>{ departure.trainNumber }</td>\n            <td>{ departure.trackNumber || 'TBD' }</td>\n            <td>{ departure.status }</td>\n        </tr>\n    );\n}\n\nexport default Departure;","import axios from 'axios';\n\nconst baseUrl = '/api/departures';\n\nlet getAll = async function getAll(station) {\n    let params = {};\n\n    if (station) {\n        params.station = station;\n    }\n    let response = await axios.get(baseUrl,  {\n        params: params\n    });\n    return response.data;\n}\n\nexport default { getAll };\n","import React, {useState, useEffect} from 'react';\nimport Departure from './Departure';\nimport departureService from '../services/departures';\nimport moment from 'moment-timezone';\n\nconst northStation = 'place-north';\nconst southStation = 'place-sstat';\n\nlet Departures = function Departures()  {\n    const [departures, setDepartures] = useState([]);\n    const [station, setStation] = useState(northStation);\n    const [refresh, setRefresh] = useState(true);\n    const [isLoading, setIsLoading] = useState(true);\n\n    let hook = function hook() {\n        (async function getDepartures() {\n            setIsLoading(true);\n            const response = await departureService.getAll(station);\n            setIsLoading(false);\n            response.sort((a,b) => Date.parse(a.departureTime) - Date.parse(b.departureTime));\n            setDepartures(response);\n        })();\n    }\n\n    useEffect(hook, [station, refresh]);\n\n    return (\n        <div className=\"departures\">\n            <h1>{station === southStation ? 'South Station' : 'North Station'} Departures</h1>\n            <h2>{ moment().tz('America/New_York').format('MMMM D, YYYY, h:mm A z') }</h2>\n            <div>\n                <button className=\"button-switch-station\" onClick={() => setStation(station === southStation ? northStation : southStation)}>\n                    Switch to {station === southStation ? 'North Station' : 'South Station'}\n                </button>\n                <button onClick={() => setRefresh(!refresh)}>\n                    Refresh\n                </button>\n            </div>\n            <br/>\n            *times are in EDT\n            {!isLoading &&\n                <table>\n                    <tbody>\n                    <tr>\n                        <th>Carrier</th>\n                        <th>Time</th>\n                        <th>Destination</th>\n                        <th>Train#</th>\n                        <th>Track#</th>\n                        <th>Status</th>\n                    </tr>\n                    {departures.map(departure =>\n                        <Departure\n                            key={departure.trainNumber}\n                            departure={departure}\n                        />\n                    )}\n                    </tbody>\n                </table>\n            }\n            {isLoading &&\n                <div>Loading...</div>\n            }\n        </div>\n    );\n}\n\nexport default Departures;","import React from 'react';\nimport './App.css';\nimport Departures from './components/Departures';\n\nfunction App() {\n  return (\n    <>\n      <Departures />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}